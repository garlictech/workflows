#! /usr/bin/env node

const fs = require('fs-extra')
const _ = require('lodash')
const execute = require('child_process').execSync
const merge = require('merge')

var newDeps = {}

_.forEach(['package.workflow.json', 'package.shared.json'], filename => {
  let remotePjson = {}
  try {
    remotePjson = fs.readJsonSync(filename);
  } catch (err) {}
  _.assign(newDeps, remotePjson.dependencies, remotePjson.devDependencies, remotePjson.optionalDependencies, remotePjson.peerDependencies);
})

var keys = _.keys(newDeps)

if (keys.length !== 0) {
  packages = keys.reduce((current, next) => current + ` ${next}@${newDeps[next]}`, "")
  execute(`yarn add --network-timeout 1000000 -W ${packages}`, { stdio: [0, 1, 2] });
}

try {
  let workflow = fs.readJsonSync("package.workflow.json")
  let pjson = fs.readJsonSync("package.json")
  pjson.scripts = merge.recursive(pjson.scripts, workflow.scripts || {})
  fs.writeJsonSync("package.json", pjson, { spaces: 2 })
} catch (err) {}

try {
  let internalShared = fs.readJsonSync("_package.shared.json")
  let externalShared = fs.readJsonSync("package.shared.json")
  let mergedShared = merge.recursive(internalShared, externalShared)
  fs.writeJsonSync("_package.shared.json", mergedShared, { spaces: 2 })
} catch (err) {}

try {
  let projectPjson = fs.readJsonSync("package.project.json");
  let internalShared = fs.readJsonSync("_package.shared.json");

  ['dependencies', 'devDependencies', 'optionalDependencies', 'peerDependencies'].forEach(field => {
    projectPjson[field] = merge.recursive(projectPjson[field], internalShared[field])
  });

  fs.writeJsonSync("package.project.json", projectPjson, { spaces: 2 })
} catch (err) {}

keys = []
let remainedPackages

try {
  let internalPjson = fs.readJsonSync("_package.shared.json");
  let internalDeps = {}
  _.assign(internalDeps, internalPjson.dependencies, internalPjson.devDependencies, internalPjson.optionalDependencies, internalPjson.peerDependencies)

  let projectPjson = fs.readJsonSync('package.project.json');
  let projectDeps = {}
  _.assign(projectDeps, projectPjson.dependencies, projectPjson.devDependencies, projectPjson.optionalDependencies, projectPjson.peerDependencies)

  remainedPackages = _.omit(projectDeps, _.keys(internalDeps))
  keys = _.keys(remainedPackages)
} catch (err) {}

if (keys.length !== 0) {
  packages = keys.reduce((current, next) => `${current} ${next}@${remainedPackages[next]}`, "")
  execute(`yarn add --network-timeout 1000000 -W ${packages}`, { stdio: [0, 1, 2] });
}
